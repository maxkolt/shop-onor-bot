require('dotenv').config();
const { Telegraf, Scenes, session } = require('telegraf');
const mongoose = require('mongoose');
const { adSubmissionScene } = require('./src/bot/adSubmissionScene');
const { UserModel, AdModel } = require('./src/bot/models');
const restoreState = require('./src/bot/restoreState');

const categoryMap = {
  auto: 'üöó –ê–≤—Ç–æ',
  tech: 'üì± –¢–µ—Ö–Ω–∏–∫–∞',
  real_estate: 'üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
  clothing: 'üëó –û–¥–µ–∂–¥–∞/–û–±—É–≤—å',
  other: 'üì¶ –ü—Ä–æ—á–µ–µ',
  pets: 'üêæ –¢–æ–≤–∞—Ä—ã –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö'
};

const { BOT_TOKEN, MONGO_URI } = process.env;

if (!BOT_TOKEN || !MONGO_URI) {
  console.error('‚ùå BOT_TOKEN –∏–ª–∏ MONGO_URI –Ω–µ –∑–∞–¥–∞–Ω—ã');
  process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN);
bot.use(session());
bot.use(restoreState);
bot.use(new Scenes.Stage([adSubmissionScene]).middleware());

// –ó–¥–µ—Å—å –∏–¥—É—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ‚Äî –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å —É —Ç–µ–±—è

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –æ–¥–∏–Ω —Ä–∞–∑
let mongoConnected = false;
async function connectMongo() {
  if (!mongoConnected) {
    await mongoose.connect(MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      serverSelectionTimeoutMS: 5000
    });
    console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    mongoConnected = true;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Yandex Cloud Functions
module.exports.handler = async function(event, context) {
  try {
    console.log('üî• –ó–∞–ø—Ä–æ—Å –æ—Ç Telegram:', event);
    await connectMongo();

    const body = JSON.parse(event.body || '{}');

    if (!body.message && !body.callback_query) {
      console.log('‚ö†Ô∏è –ù–µ Telegram update');
      return { statusCode: 200, body: 'not a telegram update' };
    }

    await bot.handleUpdate(body);

    return { statusCode: 200, body: 'ok' };
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handler:', err);
    return { statusCode: 500, body: 'internal error' };
  }
};
