const express = require('express');
const bodyParser = require('body-parser');
const { Telegraf, Markup, Scenes, session } = require('telegraf');
const mongoose = require('mongoose');
const { adSubmissionScene } = require('./src/bot/adSubmissionScene');
const { UserModel, AdModel } = require('./src/bot/models');

const categoryMap = {
  auto: 'üöó –ê–≤—Ç–æ',
  tech: 'üì± –¢–µ—Ö–Ω–∏–∫–∞',
  real_estate: 'üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
  clothing: 'üëó –û–¥–µ–∂–¥–∞/–û–±—É–≤—å',
  other: 'üì¶ –ü—Ä–æ—á–µ–µ',
  pets: 'üêæ –¢–æ–≤–∞—Ä—ã –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö'
};

const { BOT_TOKEN, MONGO_URI, PORT = 3000 } = process.env;

if (!BOT_TOKEN || !MONGO_URI) {
  console.error('‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã BOT_TOKEN –∏–ª–∏ MONGO_URI');
  process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN);
bot.use(session());
bot.use(new Scenes.Stage([adSubmissionScene]).middleware());

function mainMenu() {
  return Markup.keyboard([
    ['–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'],
    ['–û–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –º–æ—ë–º –≥–æ—Ä–æ–¥–µ', '–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'],
    ['–ö–∞–Ω–∞–ª —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏', '–ü–æ–º–æ—â—å'],
    ['–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è']
  ]).resize();
}

bot.use((ctx, next) => {
  if (ctx.session?.awaitingLocationInput) {
    const text = ctx.message?.text;
    if (['/cancel', '/start', '/setlocation'].includes(text)) return next();
    if (text?.startsWith('/')) return ctx.reply('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ /cancel');
    if (ctx.callbackQuery) return ctx.reply('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ /cancel');
  }
  return next();
});

bot.use(async (ctx, next) => {
  if (ctx.message?.text === '/cancel') {
    ctx.session.awaitingLocationInput = false;
    delete ctx.session.category;
    if (ctx.scene && ctx.scene.current) {
      await ctx.scene.leave();
    }
    return ctx.reply('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.');
  }
  return next();
});

bot.command('start', async ctx => {
  const userId = ctx.chat.id;
  let user = await UserModel.findOne({ userId });
  if (!user) {
    user = new UserModel({
      userId,
      adCount: 0,
      hasSubscription: false,
      location: { country: '–Ω–µ —É–∫–∞–∑–∞–Ω–æ', city: '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' }
    });
    await user.save();
  }
  if (!user.location.city || user.location.city === '–Ω–µ —É–∫–∞–∑–∞–Ω–æ') {
    ctx.session.awaitingLocationInput = true;
    return ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é (—Å—Ç—Ä–∞–Ω–∞ –≥–æ—Ä–æ–¥):', Markup.removeKeyboard());
  }
  ctx.session.awaitingLocationInput = false;
  return ctx.reply('üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é:', mainMenu());
});

bot.command('setlocation', ctx => {
  ctx.session.awaitingLocationInput = true;
  return ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é (—Å—Ç—Ä–∞–Ω–∞ –≥–æ—Ä–æ–¥):', Markup.removeKeyboard());
});

bot.on('text', async (ctx, next) => {
  if (ctx.session.awaitingLocationInput) {
    const raw = ctx.message.text.trim();
    const parts = raw.split(/[\,\s]+/).filter(Boolean);
    const country = parts.length > 1 ? parts[0] : '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    const city = parts.length > 1 ? parts.slice(1).join(' ') : parts[0];
    let user = await UserModel.findOne({ userId: ctx.chat.id });
    if (!user) {
      user = new UserModel({ userId: ctx.chat.id, adCount: 0, hasSubscription: false });
    }
    user.location = { country, city };
    await user.save();
    ctx.session.awaitingLocationInput = false;
    return ctx.reply(`‚úÖ –õ–æ–∫–∞—Ü–∏—è: ${country}, ${city}`, mainMenu());
  }
  return next();
});

bot.hears('–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', ctx => ctx.scene.enter('adSubmission'));
bot.hears('–û–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –º–æ—ë–º –≥–æ—Ä–æ–¥–µ', async ctx => {
  ctx.session.offset = 0;
  await sendCityAds(ctx);
});

bot.hears('–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', ctx => {
  ctx.session.offset = 0;
  return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', Markup.inlineKeyboard([
    [Markup.button.callback(categoryMap.auto, 'filter_auto')],
    [Markup.button.callback(categoryMap.tech, 'filter_tech')],
    [Markup.button.callback(categoryMap.real_estate, 'filter_real_estate')],
    [Markup.button.callback(categoryMap.clothing, 'filter_clothing')],
    [Markup.button.callback(categoryMap.other, 'filter_other')],
    [Markup.button.callback(categoryMap.pets, 'filter_pets')]
  ]));
});

bot.hears('–ö–∞–Ω–∞–ª —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏', ctx => ctx.reply('–°—é–¥–∞ üëá', Markup.inlineKeyboard([
  Markup.button.url('–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', 'https://t.me/+SpQdiZHBoypiNDky')
])));

bot.hears('–ü–æ–º–æ—â—å', ctx => ctx.reply('–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @max12kolt](https://t.me/max12kolt)', {
  parse_mode: 'MarkdownV2'
}));

bot.hears('–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', async ctx => {
  const ads = await AdModel.find({ userId: ctx.chat.id }).sort({ createdAt: -1 }).lean();
  if (!ads.length) return ctx.reply('–ù–µ—Ç –≤–∞—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π');
  for (const ad of ads) {
    const caption = `üìÇ <b>${categoryMap[ad.category]}</b>\nüìù ${ad.description}`;
    switch (ad.mediaType) {
      case 'photo': await ctx.telegram.sendPhoto(ctx.chat.id, ad.mediaFileId, { caption, parse_mode: 'HTML' }); break;
      case 'video': await ctx.telegram.sendVideo(ctx.chat.id, ad.mediaFileId, { caption, parse_mode: 'HTML' }); break;
      case 'document': await ctx.telegram.sendDocument(ctx.chat.id, ad.mediaFileId, { caption, parse_mode: 'HTML' }); break;
      default: await ctx.replyWithHTML(caption);
    }
  }
});

bot.action(/filter_(.+)/, async ctx => {
  ctx.session.cat = ctx.match[1];
  ctx.session.offset = 0;
  await ctx.answerCbQuery();
  await sendCityAds(ctx, ctx.session.cat);
});

bot.action('more', async ctx => {
  ctx.session.offset += 5;
  await ctx.answerCbQuery();
  await sendCityAds(ctx, ctx.session.cat);
});

async function sendCityAds(ctx, cat = null) {
  await ctx.replyWithChatAction('typing');

  const user = await UserModel.findOne({ userId: ctx.chat.id }).lean();
  if (!user || user.location.city === '–Ω–µ —É–∫–∞–∑–∞–Ω–æ') {
    return ctx.reply('‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é: /setlocation');
  }

  const { city: uCity, country: uCountry } = user.location;
  const query = {};
  if (cat) query.category = cat;

  const ads = await AdModel.find(query).sort({ createdAt: -1 }).lean();
  const userIds = [...new Set(ads.map(ad => ad.userId))];
  const users = await UserModel.find({ userId: { $in: userIds } }).lean();
  const userMap = new Map(users.map(u => [u.userId, u]));

  const qCity = uCity.toLowerCase();
  const qCountry = uCountry.toLowerCase();

  const filtered = ads.filter(ad => {
    const adUser = userMap.get(ad.userId);
    if (!adUser) return false;
    const cCity = adUser.location.city.toLowerCase();
    const cCountry = adUser.location.country.toLowerCase();
    return (qCity && cCity.includes(qCity)) || (qCountry && cCountry.includes(qCountry));
  });

  const offset = ctx.session.offset || 0;
  const page = filtered.slice(offset, offset + 5);

  if (!page.length) return ctx.reply(`üîç –ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ ${uCity}`);

  for (const ad of page) {
    const adUser = userMap.get(ad.userId);
    const loc = `${adUser.location.country}, ${adUser.location.city}`;
    const caption = `üìÇ <b>${categoryMap[ad.category]}</b>\nüìù ${ad.description}\nüìç ${loc}`;
    switch (ad.mediaType) {
      case 'photo': await ctx.telegram.sendPhoto(ctx.chat.id, ad.mediaFileId, { caption, parse_mode: 'HTML' }); break;
      case 'video': await ctx.telegram.sendVideo(ctx.chat.id, ad.mediaFileId, { caption, parse_mode: 'HTML' }); break;
      case 'document': await ctx.telegram.sendDocument(ctx.chat.id, ad.mediaFileId, { caption, parse_mode: 'HTML' }); break;
      default: await ctx.replyWithHTML(caption);
    }
  }

  if (filtered.length > offset + 5) {
    await ctx.reply('‚¨áÔ∏è –ï—â—ë?', Markup.inlineKeyboard([
      Markup.button.callback('–ï—â—ë', 'more')
    ]));
  }
}

bot.catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err));

let mongoConnected = false;
async function connectMongo() {
  if (!mongoConnected) {
    await mongoose.connect(MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      serverSelectionTimeoutMS: 5000
    });
    console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    mongoConnected = true;
  }
}

const app = express();
app.use(bodyParser.json());

app.post('/', async (req, res) => {
  try {
    await bot.handleUpdate(req.body);
    res.send('ok');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ webhook:', err);
    res.status(500).send('error');
  }
});

app.listen(PORT, '0.0.0.0', async () => {
  await connectMongo();
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:${PORT}`);
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
