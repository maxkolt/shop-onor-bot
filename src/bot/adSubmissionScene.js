const { Scenes, Markup } = require('telegraf');
const { UserModel, AdModel } = require('./models');

const categoryMap = {
  auto: 'üöó –ê–≤—Ç–æ',
  tech: 'üì± –¢–µ—Ö–Ω–∏–∫–∞',
  real_estate: 'üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
  clothing: 'üëó –û–¥–µ–∂–¥–∞/–û–±—É–≤—å',
  other: 'üì¶ –ü—Ä–æ—á–µ–µ',
  pets: 'üêæ –¢–æ–≤–∞—Ä—ã –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö'
};

const CHANNEL_ID = -1002364231507;

const mainMenuKeyboard = Markup.keyboard([
  ['–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'],
  ['–û–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –º–æ—ë–º –≥–æ—Ä–æ–¥–µ', '–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'],
  ['–ö–∞–Ω–∞–ª —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏', '–ü–æ–º–æ—â—å'],
  ['–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è']
]).resize();

const adSubmissionScene = new Scenes.BaseScene('adSubmission');

adSubmissionScene.command('cancel', async (ctx) => {
  await ctx.reply('‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–¥–∞—á—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è.', mainMenuKeyboard);
  await ctx.scene.leave();
  ctx.session = {};
});

adSubmissionScene.enter(async (ctx) => {
  ctx.session.category = null;
  ctx.session.hintMsgId = null;
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const catMsg = await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–¥–∞—á–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', Markup.inlineKeyboard([
    [Markup.button.callback('–ê–≤—Ç–æ', 'category_auto')],
    [Markup.button.callback('–¢–µ—Ö–Ω–∏–∫–∞', 'category_tech')],
    [Markup.button.callback('–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', 'category_real_estate')],
    [Markup.button.callback('–û–¥–µ–∂–¥–∞/–û–±—É–≤—å', 'category_clothing')],
    [Markup.button.callback('–ü—Ä–æ—á–µ–µ', 'category_other')],
    [Markup.button.callback('–¢–æ–≤–∞—Ä—ã –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö', 'category_pets')]
  ]));
  ctx.session.catMsgId = catMsg.message_id;
});

adSubmissionScene.action(/category_(.+)/, async (ctx) => {
  ctx.session.category = ctx.match[1];
  await ctx.answerCbQuery();

  const hintText = `‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: <b>${categoryMap[ctx.session.category]}</b>.

1. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.
2. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/—Ñ–∞–π–ª.
3. –ö–æ–Ω—Ç–∞–∫—Ç—ã (–ø–æ –∂–µ–ª–∞–Ω–∏—é).
4. –£–∫–∞–∂–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é.

–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.`;

  // –ï—Å–ª–∏ —É–∂–µ –±—ã–ª–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Äî –ø–æ–ø—Ä–æ–±—É–π –µ—ë –∑–∞–º–µ–Ω–∏—Ç—å
  if (ctx.session.hintMsgId) {
    try {
      await ctx.telegram.editMessageText(
        ctx.chat.id,
        ctx.session.hintMsgId,
        undefined,
        hintText,
        { parse_mode: 'HTML' }
      );
    } catch (e) {
      // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (–µ—Å–ª–∏ –æ–Ω–∞ –≤–æ–æ–±—â–µ –±—ã–ª–∞)
      try { await ctx.telegram.deleteMessage(ctx.chat.id, ctx.session.hintMsgId); } catch {}
      // –ü—Ä–∏—Å—ã–ª–∞–µ–º –Ω–æ–≤—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë id
      const m = await ctx.replyWithHTML(hintText);
      ctx.session.hintMsgId = m.message_id;
    }
  } else {
    // –ü–µ—Ä–≤—ã–π —Ä–∞–∑ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å–ª–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å id
    const m = await ctx.replyWithHTML(hintText);
    ctx.session.hintMsgId = m.message_id;
  }
});



adSubmissionScene.on('photo', async (ctx) => {
  const fileId = ctx.message.photo.slice(-1)[0].file_id;
  const caption = ctx.message.caption?.trim();
  if (caption) {
    return await publishAdFromMedia(ctx, 'photo', fileId, caption);
  }
  return await handleMediaWithoutCaption(ctx, 'photo', fileId);
});

adSubmissionScene.on('video', async (ctx) => {
  const fileId = ctx.message.video.file_id;
  const caption = ctx.message.caption?.trim();
  if (caption) {
    return await publishAdFromMedia(ctx, 'video', fileId, caption);
  }
  return await handleMediaWithoutCaption(ctx, 'video', fileId);
});

adSubmissionScene.on('document', async (ctx) => {
  const fileId = ctx.message.document.file_id;
  const caption = ctx.message.caption?.trim();
  if (caption) {
    return await publishAdFromMedia(ctx, 'document', fileId, caption);
  }
  return await handleMediaWithoutCaption(ctx, 'document', fileId);
});

async function handleMediaWithoutCaption(ctx, type, fileId) {
  if (!ctx.session.category) {
    return ctx.reply('‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.');
  }
  ctx.session.mediaType = type;
  ctx.session.mediaFileId = fileId;
  ctx.session.awaitingDescriptionConfirmation = true;
  await ctx.reply('‚ùì –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–∞–π–ª—É?', Markup.inlineKeyboard([
    [Markup.button.callback('–î–∞', 'confirm_description_yes'), Markup.button.callback('–ù–µ—Ç', 'confirm_description_no')]
  ]));
}

async function publishAdFromMedia(ctx, type, fileId, caption) {
  const userId = ctx.chat.id;
  const category = ctx.session.category;
  await publishAd(ctx, { userId, category, description: caption, mediaType: type, mediaFileId: fileId });
  ctx.session = {};
  await ctx.reply('üìç –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainMenuKeyboard);
  return ctx.scene.leave();
}

adSubmissionScene.action('confirm_description_yes', async (ctx) => {
  ctx.session.awaitingDescription = true;
  ctx.session.awaitingDescriptionConfirmation = false;
  await ctx.answerCbQuery();
  await ctx.reply('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:');
});

adSubmissionScene.action('confirm_description_no', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply('‚ö†Ô∏è –ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ.', mainMenuKeyboard);
  await ctx.scene.leave();
  ctx.session = {};
});

adSubmissionScene.on('text', async (ctx) => {
  const text = ctx.message.text.trim();
  const userId = ctx.chat.id;
  const category = ctx.session.category;
  if (ctx.session.awaitingDescriptionConfirmation) {
    return ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç" –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å.');
  }
  if (ctx.session.awaitingDescription) {
    ctx.session.awaitingDescription = false;
    const { mediaType, mediaFileId } = ctx.session;
    if (!mediaType || !mediaFileId) {
      await ctx.reply('‚ùó –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', mainMenuKeyboard);
      ctx.session = {};
      return ctx.scene.leave();
    }
    await publishAd(ctx, { userId, category, description: text, mediaType, mediaFileId });
    ctx.session = {};
    await ctx.reply('üìç –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainMenuKeyboard);
    return ctx.scene.leave();
  }
  if (!category) return ctx.reply('‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.');
  if (!text || text.startsWith('/')) return ctx.reply('–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "/"');
  await publishAd(ctx, { userId, category, description: text });
  ctx.session = {};
  await ctx.reply('üìç –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainMenuKeyboard);
  ctx.scene.leave();
});

function generateCaption(category, description) {
  const now = new Date();
  const date = now.toLocaleDateString('ru-RU');
  const time = now.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
  return `üì¢ <b>–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!</b>\n\nüìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> <i>${categoryMap[category]}</i>\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${description}\n\nüìÖ ${date}, ${time}`;
}

async function publishAd(ctx, { userId, category, description, mediaType = null, mediaFileId = null }) {
  try {
    await new AdModel({ userId, category, description, mediaType, mediaFileId, createdAt: new Date() }).save();
    const user = await UserModel.findOne({ userId });
    if (user) {
      user.adCount++;
      await user.save();
    }
    if (mediaType && mediaFileId) {
      const sendMap = {
        photo: () => ctx.telegram.sendPhoto(CHANNEL_ID, mediaFileId, { caption: generateCaption(category, description), parse_mode: 'HTML' }),
        video: () => ctx.telegram.sendVideo(CHANNEL_ID, mediaFileId, { caption: generateCaption(category, description), parse_mode: 'HTML' }),
        document: () => ctx.telegram.sendDocument(CHANNEL_ID, mediaFileId, { caption: generateCaption(category, description), parse_mode: 'HTML' })
      };
      await sendMap[mediaType]();
    } else {
      await ctx.telegram.sendMessage(CHANNEL_ID, generateCaption(category, description), { parse_mode: 'HTML' });
    }
    await ctx.reply('‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
  } catch (err) {
    console.error(err);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

module.exports = { adSubmissionScene };
