const { Scenes, Markup } = require('telegraf');
const { AdModel } = require('./models');

const categoryMap = {
  auto: 'üöó –ê–≤—Ç–æ',
  tech: 'üì± –¢–µ—Ö–Ω–∏–∫–∞',
  real_estate: 'üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
  clothing: 'üëó –û–¥–µ–∂–¥–∞/–û–±—É–≤—å',
  other: 'üì¶ –ü—Ä–æ—á–µ–µ',
  pets: 'üêæ –¢–æ–≤–∞—Ä—ã –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö'
};

const adSubmissionScene = new Scenes.WizardScene(
  'adSubmission',
  async (ctx) => {
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', Markup.inlineKeyboard([
      [Markup.button.callback(categoryMap.auto, 'cat_auto')],
      [Markup.button.callback(categoryMap.tech, 'cat_tech')],
      [Markup.button.callback(categoryMap.real_estate, 'cat_real_estate')],
      [Markup.button.callback(categoryMap.clothing, 'cat_clothing')],
      [Markup.button.callback(categoryMap.other, 'cat_other')],
      [Markup.button.callback(categoryMap.pets, 'cat_pets')]
    ]));
    return ctx.wizard.next();
  },
  async (ctx) => {
    if (!ctx.callbackQuery || !ctx.callbackQuery.data.startsWith('cat_')) {
      return ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏.');
    }
    ctx.session.category = ctx.callbackQuery.data.replace('cat_', '');
    await ctx.answerCbQuery();
    await ctx.reply('üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):');
    return ctx.wizard.next();
  },
  async (ctx) => {
    if (!ctx.message || !ctx.message.text) {
      return ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.');
    }
    ctx.session.description = ctx.message.text.trim().slice(0, 1000);
    await ctx.reply('üìé –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:');
    return ctx.wizard.next();
  },
  async (ctx) => {
    const file = ctx.message?.photo?.slice(-1)[0]
      || ctx.message?.video
      || ctx.message?.document;

    if (!file || !file.file_id) {
      return ctx.reply('‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.');
    }

    const mediaType = ctx.message.photo ? 'photo' :
      ctx.message.video ? 'video' :
        ctx.message.document ? 'document' : null;

    const ad = new AdModel({
      userId: ctx.chat.id,
      category: ctx.session.category,
      description: ctx.session.description,
      mediaType,
      mediaFileId: file.file_id,
      createdAt: new Date()
    });

    await ad.save();

    delete ctx.session.category;
    delete ctx.session.description;

    await ctx.reply('‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.');
    return ctx.scene.leave();
  }
);

adSubmissionScene.command('cancel', async (ctx) => {
  delete ctx.session.category;
  delete ctx.session.description;
  await ctx.reply('‚ùå –ü–æ–¥–∞—á–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.');
  return ctx.scene.leave();
});

adSubmissionScene.use(async (ctx, next) => {
  const text = ctx.message?.text;
  if (text === '/cancel') return next();

  if (!ctx.session.category && ctx.wizard.cursor > 0) {
    return ctx.reply('‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.');
  }

  return next();
});

module.exports = { adSubmissionScene };
