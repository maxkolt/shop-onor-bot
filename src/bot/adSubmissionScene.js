const { Scenes, Markup } = require('telegraf');
const { UserModel, AdModel } = require('./models');

// ‚úÖ –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
const categoryMap = {
  auto: 'üöó –ê–≤—Ç–æ',
  tech: 'üì± –¢–µ—Ö–Ω–∏–∫–∞',
  real_estate: 'üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
  clothing: 'üëó –û–¥–µ–∂–¥–∞/–û–±—É–≤—å',
  other: 'üì¶ –ü—Ä–æ—á–µ–µ',
  pets: 'üêæ –¢–æ–≤–∞—Ä—ã –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö',
};

// === –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é ===
const generateCaption = (type, category, description, location) => {
  const now = new Date();
  const date = now.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: 'numeric' });
  const time = now.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
  const locationLine = location && location.country !== '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
    ? `\nüìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> ${location.country}, ${location.city}`
    : '';
  return (
    `üì¢ <b>–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!</b>\n\n` +
    `üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> <i>${categoryMap[category] || category}</i>\n` +
    `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${description}\n\n` +
    `üìÖ ${date}, ${time}` +
    locationLine
  );
};

// ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
const CHANNEL_ID = -1002364231507;

// –°–æ–∑–¥–∞—ë–º —Å—Ü–µ–Ω—É –ø–æ–¥–∞—á–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
const adSubmissionScene = new Scenes.BaseScene('adSubmission');

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≤–Ω—É—Ç—Ä–∏ —Å—Ü–µ–Ω—ã ===
// /cancel ‚Äî –≤—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã
adSubmissionScene.command('cancel', ctx => {
  ctx.reply('üö´ –ü–æ–¥–∞—á–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.');
  return ctx.scene.leave();
});
// /setlocation ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º –∏ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–º–µ–Ω—É
adSubmissionScene.command('setlocation', ctx =>
  ctx.reply('‚ùó –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–æ–¥–∞—á—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ /cancel.')
);

// === –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É: –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
adSubmissionScene.enter(async ctx => {
  const userId = ctx.chat.id;
  let user = await UserModel.findOne({ userId });
  if (!user) {
    user = new UserModel({
      userId,
      adCount: 0,
      hasSubscription: false,
      location: { country: '–Ω–µ —É–∫–∞–∑–∞–Ω–æ', city: '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' }
    });
    await user.save();
  }
  await ctx.reply(
    '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:',
    Markup.inlineKeyboard(
      Object.entries(categoryMap).map(
        ([key, label]) => Markup.button.callback(label, `category_${key}`)
      ),
      { columns: 1 }
    )
  );
});

// === –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
adSubmissionScene.action(/category_(.+)/, async ctx => {
  const category = ctx.match[1];
  ctx.session.category = category;
  await ctx.reply(
    `–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${categoryMap[category] || category}.
1. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.
2. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–∞–π–ª.
3. –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é).
4. –£–∫–∞–∂–∏—Ç–µ, –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å (—Å—Ç—Ä–∞–Ω–∞, –≥–æ—Ä–æ–¥).`
  );
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è ===
adSubmissionScene.on('text', async ctx => {
  const text = ctx.message.text;
  if (text.startsWith('/')) {
    return ctx.reply('‚ùó –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–∞—á—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ /cancel.');
  }
  const userId = ctx.chat.id;
  const category = ctx.session.category;
  const description = text.trim();
  if (!category) {
    await ctx.reply('–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–µ—Ä–µ–¥ –≤–≤–æ–¥–æ–º –æ–ø–∏—Å–∞–Ω–∏—è.');
    return ctx.scene.leave();
  }
  if (!description) {
    return ctx.reply('–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
  }
  try {
    const ad = new AdModel({ userId, category, description, createdAt: new Date() });
    await ad.save();
    const user = await UserModel.findOne({ userId });
    user.adCount += 1;
    await user.save();
    const post = generateCaption('text', category, description, user.location);
    await ctx.telegram.sendMessage(CHANNEL_ID, post, { parse_mode: 'HTML' });
    await ctx.reply('‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞:', err);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
  return ctx.scene.leave();
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ ===
adSubmissionScene.on('photo', async ctx => {
  const caption = ctx.message.caption;
  if (caption && caption.startsWith('/')) {
    return ctx.reply('‚ùó –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–∞—á—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ /cancel.');
  }
  const userId = ctx.chat.id;
  const category = ctx.session.category;
  const description = caption || '';
  if (!category) {
    await ctx.reply('–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ç–æ.');
    return ctx.scene.leave();
  }
  try {
    const fileId = ctx.message.photo.pop().file_id;
    const ad = new AdModel({ userId, category, description, mediaType: 'photo', mediaFileId: fileId, createdAt: new Date() });
    await ad.save();
    const user = await UserModel.findOne({ userId });
    user.adCount += 1;
    await user.save();
    const post = generateCaption('photo', category, description, user.location);
    await ctx.telegram.sendPhoto(CHANNEL_ID, fileId, { caption: post, parse_mode: 'HTML' });
    await ctx.reply('‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ:', err);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
  return ctx.scene.leave();
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ ===
adSubmissionScene.on('video', async ctx => {
  const caption = ctx.message.caption;
  if (caption && caption.startsWith('/')) {
    return ctx.reply('‚ùó –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–∞—á—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ /cancel.');
  }
  const userId = ctx.chat.id;
  const category = ctx.session.category;
  const description = caption || '';
  if (!category) {
    await ctx.reply('–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤–∏–¥–µ–æ.');
    return ctx.scene.leave();
  }
  try {
    const fileId = ctx.message.video.file_id;
    const user = await UserModel.findOne({ userId });
    const post = generateCaption('video', category, description, user.location);
    await ctx.telegram.sendVideo(CHANNEL_ID, fileId, { caption: post, parse_mode: 'HTML' });
    user.adCount += 1;
    await user.save();
    await ctx.reply('‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ:', err);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
  return ctx.scene.leave();
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ===
adSubmissionScene.on('document', async ctx => {
  const caption = ctx.message.caption;
  if (caption && caption.startsWith('/')) {
    return ctx.reply('‚ùó –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–∞—á—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ /cancel.');
  }
  const userId = ctx.chat.id;
  const category = ctx.session.category;
  const description = caption || '';
  if (!category) {
    await ctx.reply('–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–∞–π–ª–∞.');
    return ctx.scene.leave();
  }
  try {
    const fileId = ctx.message.document.file_id;
    const ad = new AdModel({ userId, category, description, mediaType: 'document', mediaFileId: fileId, createdAt: new Date() });
    await ad.save();
    const user = await UserModel.findOne({ userId });
    user.adCount += 1;
    await user.save();
    const post = generateCaption('document', category, description, user.location);
    await ctx.telegram.sendDocument(CHANNEL_ID, fileId, { caption: post, parse_mode: 'HTML' });
    await ctx.reply('‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', err);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
  return ctx.scene.leave();
});

module.exports = adSubmissionScene;
