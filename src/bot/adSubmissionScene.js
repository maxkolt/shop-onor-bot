const { Scenes, Markup } = require('telegraf');
const { UserModel, AdModel } = require('./models');

// ‚úÖ –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
const categoryMap = {
  auto: 'üöó –ê–≤—Ç–æ',
  tech: 'üì± –¢–µ—Ö–Ω–∏–∫–∞',
  real_estate: 'üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
  clothing: 'üëó –û–¥–µ–∂–¥–∞/–û–±—É–≤—å',
  other: 'üì¶ –ü—Ä–æ—á–µ–µ',
  pets: 'üêæ –¢–æ–≤–∞—Ä—ã –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö',
};

const CHANNEL_ID = -1002364231507;

const adSubmissionScene = new Scenes.BaseScene('adSubmission');

// === –í–•–û–î –í –°–¶–ï–ù–£ ===
adSubmissionScene.enter(async (ctx) => {
  const userId = ctx.chat.id;

  let user = await UserModel.findOne({ userId });
  if (!user) {
    user = new UserModel({
      userId,
      adCount: 0,
      hasSubscription: false,
      location: { country: '–Ω–µ —É–∫–∞–∑–∞–Ω–æ', city: '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' },
    });
    await user.save();
  }


  await ctx.reply(
    '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:',
    Markup.inlineKeyboard([
      [Markup.button.callback('–ê–≤—Ç–æ', 'category_auto')],
      [Markup.button.callback('–¢–µ—Ö–Ω–∏–∫–∞', 'category_tech')],
      [Markup.button.callback('–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', 'category_real_estate')],
      [Markup.button.callback('–û–¥–µ–∂–¥–∞/–û–±—É–≤—å', 'category_clothing')],
      [Markup.button.callback('–ü—Ä–æ—á–µ–µ', 'category_other')],
      [Markup.button.callback('–¢–æ–≤–∞—Ä—ã –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö', 'category_pets')],
    ])
  );
});

// === –í–´–ë–û–† –ö–ê–¢–ï–ì–û–†–ò–ò ===
adSubmissionScene.action(/category_(.+)/, async (ctx) => {
  const category = ctx.match[1];
  ctx.session.category = category;

  await ctx.reply(
    `–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${categoryMap[category] || category}.
1. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.
2. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–∞–π–ª.
3. –û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é).
4. –£–∫–∞–∂–∏—Ç–µ –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å (—Å—Ç—Ä–∞–Ω–∞, –≥–æ—Ä–æ–¥).`
  );
});

// === –§–£–ù–ö–¶–ò–Ø –ü–û–î–ü–ò–°–ò –ö –û–ë–™–Ø–í–õ–ï–ù–ò–Æ ===
const generateCaption = (type, category, description) => {
  const now = new Date();
  const date = now.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: 'numeric' });
  const time = now.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });

  return (
    `üì¢ <b>–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!</b>\n\n` +
    `üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> <i>${categoryMap[category] || category}</i>\n` +
    `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${description}\n\n` +
    `üìÖ ${date}, ${time}`
  );
};

// === –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ===
adSubmissionScene.on('text', async (ctx) => {
  const userId = ctx.chat.id;
  const category = ctx.session.category;
  const description = ctx.message.text;

  if (!category) {
    await ctx.reply('–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–µ—Ä–µ–¥ –æ–ø–∏—Å–∞–Ω–∏–µ–º.');
    return ctx.scene.leave();
  }

  if (!description || description.trim() === '') {
    await ctx.reply('–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
    return;
  }

  try {
    const ad = new AdModel({ userId, category, description, createdAt: new Date() });
    await ad.save();

    const user = await UserModel.findOne({ userId });
    user.adCount += 1;
    await user.save();

    const post = generateCaption('text', category, description);
    await ctx.telegram.sendMessage(CHANNEL_ID, post, { parse_mode: 'HTML' });

    await ctx.reply('–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞:', error.message);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }

  ctx.scene.leave();
});

// === –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û ===
adSubmissionScene.on('photo', async (ctx) => {
  const userId = ctx.chat.id;
  const category = ctx.session.category;
  const description = ctx.message.caption || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
  const photo = ctx.message.photo[ctx.message.photo.length - 1].file_id;

  if (!category) {
    await ctx.reply('–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ç–æ.');
    return ctx.scene.leave();
  }

  try {
    const ad = new AdModel({
      userId,
      category,
      description,
      mediaType: 'photo',
      mediaFileId: photo,
      createdAt: new Date(),
    });
    await ad.save();

    const user = await UserModel.findOne({ userId });
    user.adCount += 1;
    await user.save();

    const caption = generateCaption('photo', category, description);
    await ctx.telegram.sendPhoto(CHANNEL_ID, photo, {
      caption,
      parse_mode: 'HTML',
    });

    await ctx.reply('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ:', error.message);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }

  ctx.scene.leave();
});

// === –û–ë–†–ê–ë–û–¢–ö–ê –í–ò–î–ï–û ===
adSubmissionScene.on('video', async (ctx) => {
  const category = ctx.session.category;
  const video = ctx.message.video.file_id;
  const description = ctx.message.caption || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';

  if (!category) {
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤–∏–¥–µ–æ.');
    return ctx.scene.leave();
  }

  try {
    const caption = generateCaption('video', category, description);
    await ctx.telegram.sendVideo(CHANNEL_ID, video, {
      caption,
      parse_mode: 'HTML',
    });

    await ctx.reply('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ:', error.message);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }

  ctx.scene.leave();
});

// === –û–ë–†–ê–ë–û–¢–ö–ê –î–û–ö–£–ú–ï–ù–¢–ê ===
adSubmissionScene.on('document', async (ctx) => {
  const category = ctx.session.category;
  const doc = ctx.message.document.file_id;
  const description = ctx.message.caption || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';

  if (!category) {
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–∞–π–ª–∞.');
    return ctx.scene.leave();
  }

  try {
    const caption = generateCaption('document', category, description);
    await ctx.telegram.sendDocument(CHANNEL_ID, doc, {
      caption,
      parse_mode: 'HTML',
    });

    await ctx.reply('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error.message);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }

  ctx.scene.leave();
});

module.exports = { adSubmissionScene };
