// === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
require('dotenv').config();

const express = require('express');
const { Telegraf, Markup, Scenes, session } = require('telegraf');
const mongoose = require('mongoose');
const  adSubmissionScene  = require('./adSubmissionScene');
const { UserModel, AdModel } = require('./models');

// === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
const BOT_TOKEN = process.env.BOT_TOKEN;
const MONGO_URI = process.env.MONGO_URI;
const PORT = process.env.PORT || 10000;
const WEBHOOK_URL = `https://boroxlo-bot-tg.onrender.com`;

if (!BOT_TOKEN || !MONGO_URI) {
  console.error('‚ùå BOT_TOKEN –∏–ª–∏ MONGO_URI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env');
  process.exit(1);
}

mongoose.connect(MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!'))
  .catch((err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message);
    process.exit(1);
  });

const bot = new Telegraf(BOT_TOKEN);

const stage = new Scenes.Stage([adSubmissionScene]);
bot.use(session());
bot.use(stage.middleware());

bot.command('start', async (ctx) => {
  if (!ctx.session.welcomeMessageSent) {
    await ctx.reply(
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:',
      Markup.keyboard([
        ['–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'],
        ['–û–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –º–æ—ë–º –≥–æ—Ä–æ–¥–µ', '–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'],
        ['–ö–∞–Ω–∞–ª —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏', '–ü–æ–º–æ—â—å'],
      ]).resize()
    );
    ctx.session.welcomeMessageSent = true;
  }
});

bot.command('setlocation', async (ctx) => {
  ctx.session.awaitingLocationInput = true;
  await ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–°—Ç—Ä–∞–Ω–∞, –ì–æ—Ä–æ–¥"');
});

bot.on('text', async (ctx, next) => {
  if (ctx.session.awaitingLocationInput) {
    const [country, city] = ctx.message.text.split(',').map(s => s.trim());

    if (!country || !city) {
      return await ctx.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: "–°—Ç—Ä–∞–Ω–∞, –ì–æ—Ä–æ–¥"');
    }

    const userId = ctx.chat.id;
    const user = await UserModel.findOne({ userId });

    if (user) {
      user.location = { country, city };
      await user.save();

      ctx.session.awaitingLocationInput = false;
      return await ctx.reply(`‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${country}, ${city}`);
    } else {
      return await ctx.reply('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
  }
  return next();
});

bot.hears('–ö–∞–Ω–∞–ª —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏', async (ctx) => {
  await ctx.reply(
    '–°—é–¥–∞ üëá',
    Markup.inlineKeyboard([
      Markup.button.url('–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', 'https://t.me/+SpQdiZHBoypiNDky')
    ])
  );
});

bot.hears('–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', async (ctx) => {
  const userId = ctx.chat.id;
  let user = await UserModel.findOne({ userId });
  if (!user) {
    user = new UserModel({ userId, adCount: 0, hasSubscription: false });
    await user.save();
  }
  return ctx.scene.enter('adSubmission');
});

bot.hears('–ü–æ–º–æ—â—å', async (ctx) => {
  await ctx.reply(
    '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @max12kolt](https://t.me/max12kolt)',
    { parse_mode: 'MarkdownV2' }
  );
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –º–æ—ë–º –≥–æ—Ä–æ–¥–µ" ===
bot.hears('–û–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –º–æ—ë–º –≥–æ—Ä–æ–¥–µ', async (ctx) => {
  ctx.session.cityAdOffset = 0;
  return sendCityAds(ctx);
});

// === –ö–Ω–æ–ø–∫–∞ "–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" ===
bot.hears('–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', async (ctx) => {
  ctx.session.cityAdOffset = 0;
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', Markup.inlineKeyboard([
    [Markup.button.callback('üöó –ê–≤—Ç–æ', 'filter_auto')],
    [Markup.button.callback('üì± –¢–µ—Ö–Ω–∏–∫–∞', 'filter_tech')],
    [Markup.button.callback('üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', 'filter_real_estate')],
    [Markup.button.callback('üëó –û–¥–µ–∂–¥–∞/–û–±—É–≤—å', 'filter_clothing')],
    [Markup.button.callback('üì¶ –ü—Ä–æ—á–µ–µ', 'filter_other')],
    [Markup.button.callback('üêæ –¢–æ–≤–∞—Ä—ã –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö', 'filter_pets')],
  ]));
});

bot.action(/filter_(.+)/, async (ctx) => {
  const selectedCategory = ctx.match[1];
  ctx.session.selectedCategory = selectedCategory;
  ctx.session.cityAdOffset = 0;
  await ctx.answerCbQuery();
  return sendCityAds(ctx, selectedCategory);
});

bot.action('more_city_ads', async (ctx) => {
  ctx.session.cityAdOffset = (ctx.session.cityAdOffset || 0) + 5;
  const category = ctx.session.selectedCategory || null;
  await ctx.answerCbQuery();
  await sendCityAds(ctx, category);
});

const categoryMap = {
  auto: 'üöó –ê–≤—Ç–æ',
  tech: 'üì± –¢–µ—Ö–Ω–∏–∫–∞',
  real_estate: 'üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
  clothing: 'üëó –û–¥–µ–∂–¥–∞/–û–±—É–≤—å',
  other: 'üì¶ –ü—Ä–æ—á–µ–µ',
  pets: 'üêæ –¢–æ–≤–∞—Ä—ã –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö',
};

const sendCityAds = async (ctx, categoryFilter = null) => {
  const userId = ctx.chat.id;
  const user = await UserModel.findOne({ userId });

  if (!user || !user.location || user.location.city === '–Ω–µ —É–∫–∞–∑–∞–Ω–æ') {
    return ctx.reply('‚ö†Ô∏è –í—ã –µ—â—ë –Ω–µ —É–∫–∞–∑–∞–ª–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setlocation');
  }

  const city = user.location.city;
  const offset = ctx.session.cityAdOffset || 0;
  const ads = await AdModel.find({}).sort({ createdAt: -1 });
  const matchingAds = [];

  for (const ad of ads) {
    const adUser = await UserModel.findOne({ userId: ad.userId });
    const sameCity = adUser?.location?.city?.toLowerCase() === city.toLowerCase();
    const sameCategory = !categoryFilter || ad.category === categoryFilter;
    if (sameCity && sameCategory) {
      matchingAds.push({ ad, location: adUser.location });
    }
  }

  const page = matchingAds.slice(offset, offset + 5);
  if (page.length === 0) {
    return ctx.reply(offset === 0
      ? `üîç –û–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –≥–æ—Ä–æ–¥–µ "${city}"${categoryFilter ? ` –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryMap[categoryFilter]}` : ''} –ø–æ–∫–∞ –Ω–µ—Ç.`
      : `üîö –ë–æ–ª—å—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç.`);
  }

  for (const { ad, location } of page) {
    const caption = `üìÇ <b>${categoryMap[ad.category] || ad.category}</b>\nüìù ${ad.description}\nüìç ${location.country}, ${location.city}`;
    try {
      if (ad.mediaType === 'photo') {
        await ctx.telegram.sendPhoto(ctx.chat.id, ad.mediaFileId, { caption, parse_mode: 'HTML' });
      } else if (ad.mediaType === 'video') {
        await ctx.telegram.sendVideo(ctx.chat.id, ad.mediaFileId, { caption, parse_mode: 'HTML' });
      } else if (ad.mediaType === 'document') {
        await ctx.telegram.sendDocument(ctx.chat.id, ad.mediaFileId, { caption, parse_mode: 'HTML' });
      } else {
        await ctx.replyWithHTML(caption);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error.message);
    }
  }

  if (matchingAds.length > offset + 7) {
    await ctx.reply('‚¨áÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë?', Markup.inlineKeyboard([
      Markup.button.callback('–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë', 'more_city_ads')
    ]));
  }
};

bot.catch((err) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞:', err.message);
});

const app = express();
app.use(bot.webhookCallback('/'));

app.listen(PORT, async () => {
  console.log(`üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  try {
    await bot.telegram.setWebhook(WEBHOOK_URL);
    console.log(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${WEBHOOK_URL}`);
  } catch (err) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook:', err.message);
  }
});

module.exports = adSubmissionScene;
