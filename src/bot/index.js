// === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
require('dotenv').config();

const express = require('express');
const { Telegraf, Markup, Scenes, session } = require('telegraf');
const mongoose = require('mongoose');
const adSubmissionScene = require('./adSubmissionScene');
const { UserModel, AdModel } = require('./models');

// === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
const BOT_TOKEN = process.env.BOT_TOKEN;
const MONGO_URI = process.env.MONGO_URI;
const PORT = process.env.PORT || 10000;
const WEBHOOK_URL = 'https://boroxlo-bot-tg.onrender.com';

if (!BOT_TOKEN || !MONGO_URI) {
  console.error('‚ùå BOT_TOKEN –∏–ª–∏ MONGO_URI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env');
  process.exit(1);
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ MongoDB
mongoose.connect(MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!'))
  .catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message);
    process.exit(1);
  });

const bot = new Telegraf(BOT_TOKEN);
const stage = new Scenes.Stage([adSubmissionScene]);
bot.use(session());
bot.use(stage.middleware());

// === –ö–æ–º–∞–Ω–¥–∞ /start ===
bot.command('start', async (ctx) => {
  const userId = ctx.chat.id;
  let user = await UserModel.findOne({ userId });
  if (!user) {
    user = new UserModel({
      userId,
      adCount: 0,
      hasSubscription: false,
      location: { country: '–Ω–µ —É–∫–∞–∑–∞–Ω–æ', city: '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' }
    });
    await user.save();
  }

  if (!ctx.session.welcomeMessageSent) {
    await ctx.reply(
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:',
      Markup.keyboard([
        ['–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'],
        ['–û–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –º–æ—ë–º –≥–æ—Ä–æ–¥–µ', '–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'],
        ['–ö–∞–Ω–∞–ª —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏', '–ü–æ–º–æ—â—å']
      ]).resize()
    );
    ctx.session.welcomeMessageSent = true;
  }

  if (user.location.city === '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' || user.location.country === '–Ω–µ —É–∫–∞–∑–∞–Ω–æ') {
    ctx.session.awaitingLocationInput = true;
    await ctx.reply('üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–°—Ç—Ä–∞–Ω–∞ –∏ –ì–æ—Ä–æ–¥):');
  }
});

// === –ö–æ–º–∞–Ω–¥–∞ /setlocation ===
bot.command('setlocation', async (ctx) => {
  ctx.session.awaitingLocationInput = true;
  await ctx.reply('üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–°—Ç—Ä–∞–Ω–∞ –∏ –ì–æ—Ä–æ–¥):');
});

// === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ ===
bot.on('text', async (ctx, next) => {
  if (ctx.session.awaitingLocationInput) {
    const parts = ctx.message.text.trim().split(/[\s,\n]+/).map(p => p.trim()).filter(Boolean);
    if (parts.length < 2) {
      return ctx.reply('‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∏ —Å—Ç—Ä–∞–Ω—É, –∏ –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è –ú–æ—Å–∫–≤–∞');
    }
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª "–≥–æ—Ä–æ–¥ —Å—Ç—Ä–∞–Ω–∞", –ø–æ–ø—Ä–æ–±—É–µ–º —É–≥–∞–¥–∞—Ç—å: –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –ø–æ—Ö–æ–∂ –Ω–∞ –≥–æ—Ä–æ–¥, –º–µ–Ω—è–µ–º
    let [country, ...cityParts] = parts;
    let city = cityParts.join(' ');
    // –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏ country —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º –≥–æ—Ä–æ–¥–æ–º? (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤, –Ω–æ –æ–ø—É—Å—Ç–∏–º
    const user = await UserModel.findOne({ userId: ctx.chat.id });
    if (user) {
      user.location = { country, city };
      await user.save();
      ctx.session.awaitingLocationInput = false;
      return ctx.reply(`‚úÖ –õ–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${country}, ${city}`);
    }
    return ctx.reply('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
  }
  return next();
});

// === –î—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ ===
bot.hears('–ö–∞–Ω–∞–ª —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏', ctx =>
  ctx.reply('–°—é–¥–∞ üëá', Markup.inlineKeyboard([
    Markup.button.url('–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', 'https://t.me/+SpQdiZHBoypiNDky')
  ]))
);

bot.hears('–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', async (ctx) => {
  const userId = ctx.chat.id;
  let user = await UserModel.findOne({ userId });
  if (!user) {
    user = new UserModel({ userId, adCount: 0, hasSubscription: false, location: { country:'–Ω–µ —É–∫–∞–∑–∞–Ω–æ', city:'–Ω–µ —É–∫–∞–∑–∞–Ω–æ' } });
    await user.save();
  }
  return ctx.scene.enter('adSubmission');
});

bot.hears('–ü–æ–º–æ—â—å', ctx =>
  ctx.reply(
    '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n' +
    '[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @max12kolt](https://t.me/max12kolt)',
    { parse_mode: 'MarkdownV2' }
  )
);

// === –û–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –º–æ—ë–º –≥–æ—Ä–æ–¥–µ ===
bot.hears('–û–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –º–æ—ë–º –≥–æ—Ä–æ–¥–µ', async (ctx) => {
  ctx.session.cityAdOffset = 0;
  await sendCityAds(ctx);
});

// === –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–±–µ–∑ —É—á—ë—Ç–∞ –ª–æ–∫–∞—Ü–∏–∏) ===
bot.hears('–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', ctx => {
  ctx.session.cityAdOffset = 0;
  return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', Markup.inlineKeyboard([
    [Markup.button.callback('üöó –ê–≤—Ç–æ','filter_auto')],
    [Markup.button.callback('üì± –¢–µ—Ö–Ω–∏–∫–∞','filter_tech')],
    [Markup.button.callback('üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å','filter_real_estate')],
    [Markup.button.callback('üëó –û–¥–µ–∂–¥–∞/–û–±—É–≤—å','filter_clothing')],
    [Markup.button.callback('üì¶ –ü—Ä–æ—á–µ–µ','filter_other')],
    [Markup.button.callback('üêæ –¢–æ–≤–∞—Ä—ã –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö','filter_pets')]
  ]));
});

// === Callback'–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
bot.action(/filter_(.+)/, async (ctx) => {
  const categoryFilter = ctx.match[1];
  ctx.session.selectedCategory = categoryFilter;
  ctx.session.cityAdOffset = 0;
  await ctx.answerCbQuery();
  // –í—ã–¥–∞—á–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const ads = await AdModel.find({ category: categoryFilter })
    .sort({ createdAt:-1 })
    .skip(0).limit(5);
  if (!ads.length) {
    return ctx.reply(`üîç –û–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryMap[categoryFilter] || categoryFilter}" –ø–æ–∫–∞ –Ω–µ—Ç.`);
  }
  for (const ad of ads) {
    const u = await UserModel.findOne({ userId: ad.userId });
    const loc = u?.location || { country:'–Ω–µ —É–∫–∞–∑–∞–Ω–æ', city:'–Ω–µ —É–∫–∞–∑–∞–Ω–æ' };
    const cap = `üìÇ <b>${categoryMap[ad.category]||ad.category}</b>\nüìù ${ad.description}\nüìç ${loc.country}, ${loc.city}`;
    if (ad.mediaType==='photo') await ctx.telegram.sendPhoto(ctx.chat.id, ad.mediaFileId,{caption:cap,parse_mode:'HTML'});
    else if(ad.mediaType==='video') await ctx.telegram.sendVideo(ctx.chat.id,ad.mediaFileId,{caption:cap,parse_mode:'HTML'});
    else if(ad.mediaType==='document') await ctx.telegram.sendDocument(ctx.chat.id,ad.mediaFileId,{caption:cap,parse_mode:'HTML'});
    else await ctx.replyWithHTML(cap);
  }
  if (ads.length===5) await ctx.reply('‚¨áÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë?',Markup.inlineKeyboard([Markup.button.callback('–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë','more_city_ads')]));
});

bot.action('more_city_ads', async (ctx) => {
  ctx.session.cityAdOffset = (ctx.session.cityAdOffset||0)+5;
  await ctx.answerCbQuery();
  await sendCityAds(ctx, ctx.session.selectedCategory);
});

// === sendCityAds —Å fallback –ø–æ —Å—Ç—Ä–∞–Ω–µ ===
async function sendCityAds(ctx, categoryFilter=null) {
  const user = await UserModel.findOne({ userId: ctx.chat.id });
  if (!user||!user.location||user.location.city==='–Ω–µ —É–∫–∞–∑–∞–Ω–æ'||user.location.country==='–Ω–µ —É–∫–∞–∑–∞–Ω–æ') {
    ctx.session.awaitingLocationInput=true;
    return ctx.reply('‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ /setlocation, –Ω–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è –ú–æ—Å–∫–≤–∞');
  }
  const city = user.location.city.toLowerCase();
  const country = user.location.country.toLowerCase();
  const offset = ctx.session.cityAdOffset||0;
  const adsAll = await AdModel.find({}).sort({createdAt:-1});

  // –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É
  let filtered = [];
  for (const ad of adsAll) {
    const u = await UserModel.findOne({ userId: ad.userId });
    if (u?.location?.city.toLowerCase()===city && (!categoryFilter||ad.category===categoryFilter)) filtered.push(ad);
    if (filtered.length>=offset+5) break;
  }
  let page = filtered.slice(offset, offset+5);
  if (!page.length) {
    // –ù–µ—Ç –ø–æ –≥–æ—Ä–æ–¥—É ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏—â–µ–º –ø–æ —Å—Ç—Ä–∞–Ω–µ
    await ctx.reply(`üîç –í –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ "${user.location.city}" –ø–æ–∫–∞ –Ω–µ—Ç.`);
    // —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç—Ä–∞–Ω–µ
    filtered = [];
    for (const ad of adsAll) {
      const u = await UserModel.findOne({ userId: ad.userId });
      if (u?.location?.country.toLowerCase()===country && (!categoryFilter||ad.category===categoryFilter)) filtered.push(ad);
      if (filtered.length>=5) break;
    }
    if (!filtered.length) {
      return ctx.reply(`üîç –û–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–µ "${user.location.country}" —Ç–æ–∂–µ –Ω–µ—Ç.`);
    }
    await ctx.reply(`‚ÑπÔ∏è –í–æ–∑–º–æ–∂–Ω–æ –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–µ "${user.location.country}":`);
    page = filtered;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
  for (const ad of page) {
    const u = await UserModel.findOne({ userId: ad.userId });
    const loc = u?.location||{country:'–Ω–µ —É–∫–∞–∑–∞–Ω–æ',city:'–Ω–µ —É–∫–∞–∑–∞–Ω–æ'};
    const cap = `üìÇ <b>${categoryMap[ad.category]||ad.category}</b>\nüìù ${ad.description}\nüìç ${loc.country}, ${loc.city}`;
    if(ad.mediaType==='photo') await ctx.telegram.sendPhoto(ctx.chat.id, ad.mediaFileId,{caption:cap,parse_mode:'HTML'});
    else if(ad.mediaType==='video') await ctx.telegram.sendVideo(ctx.chat.id, ad.mediaFileId,{caption:cap,parse_mode:'HTML'});
    else if(ad.mediaType==='document') await ctx.telegram.sendDocument(ctx.chat.id, ad.mediaFileId,{caption:cap,parse_mode:'HTML'});
    else await ctx.replyWithHTML(cap);
  }

  // –ö–Ω–æ–ø–∫–∞ –µ—â—ë
  if(page.length+offset<adsAll.length) {
    await ctx.reply('‚¨áÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë?',Markup.inlineKeyboard([Markup.button.callback('–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë','more_city_ads')]));
  }
}

bot.catch(err=>console.error('‚ùå –û—à–∏–±–∫–∞:',err));
const app = express();
app.use(bot.webhookCallback('/'));
app.listen(PORT,async()=>{
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  try{await bot.telegram.setWebhook(WEBHOOK_URL);console.log('Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');}catch(e){console.error('–û—à–∏–±–∫–∞ webhook:',e.message);}
});
