require('dotenv').config();
const express = require('express');
const { Telegraf, Markup, Scenes, session } = require('telegraf');
const mongoose = require('mongoose');
const { categoryMap } = require('./utils');
const adSubmissionScene = require('./adSubmissionScene');
const { UserModel, AdModel } = require('./models');

const BOT_TOKEN = process.env.BOT_TOKEN;
const MONGO_URI = process.env.MONGO_URI;
const PORT = process.env.PORT || 10000;
const WEBHOOK_URL = process.env.WEBHOOK_URL;

if (!BOT_TOKEN || !MONGO_URI || !WEBHOOK_URL) {
  console.error('‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã BOT_TOKEN, MONGO_URI –∏–ª–∏ WEBHOOK_URL');
  process.exit(1);
}

mongoose.connect(MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('‚úÖ MongoDB connected'))
  .catch(err => {
    console.error('‚ùå MongoDB error:', err);
    process.exit(1);
  });

const bot = new Telegraf(BOT_TOKEN);
bot.use(session());
const stage = new Scenes.Stage([adSubmissionScene]);
bot.use(stage.middleware());

// –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ /setlocation –≤–Ω—É—Ç—Ä–∏ —Å—Ü–µ–Ω—ã adSubmission
bot.use((ctx, next) => {
  if (
    ctx.scene.current?.id === 'adSubmission' &&
    ctx.updateType === 'message' &&
    ctx.message.text === '/setlocation'
  ) {
    return ctx.reply('‚ùó –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø–æ–¥–∞—á—É /cancel.');
  }
  return next();
});

function mainKeyboard() {
  return Markup.keyboard([
    ['–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'],
    ['–û–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –º–æ—ë–º –≥–æ—Ä–æ–¥–µ', '–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'],
    ['–ö–∞–Ω–∞–ª —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏', '–ü–æ–º–æ—â—å'],
    ['–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è'],
  ]).resize();
}

bot.command('start', async ctx => {
  if (ctx.scene.current) await ctx.scene.leave();
  const userId = ctx.chat.id;
  let user = await UserModel.findOne({ userId });
  if (!user) {
    user = new UserModel({ userId, adCount: 0, hasSubscription: false, location: { country: '–Ω–µ —É–∫–∞–∑–∞–Ω–æ', city: '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' } });
    await user.save();
  }
  if (!user.location.city || user.location.city === '–Ω–µ —É–∫–∞–∑–∞–Ω–æ') {
    ctx.session.awaitingLocationInput = true;
    return ctx.reply('üìç –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–°—Ç—Ä–∞–Ω–∞ –ì–æ—Ä–æ–¥):', Markup.removeKeyboard());
  }
  ctx.session.awaitingLocationInput = false;
  return ctx.reply('üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', mainKeyboard());
});

bot.command('setlocation', ctx => {
  ctx.session.awaitingLocationInput = true;
  return ctx.reply('üìç –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–°—Ç—Ä–∞–Ω–∞ –ì–æ—Ä–æ–¥):', Markup.removeKeyboard());
});

bot.on('text', async (ctx, next) => {
  if (ctx.session.awaitingLocationInput) {
    const t = ctx.message.text.trim();
    if (t.startsWith('/')) return;
    const parts = t.split(/\s+/);
    const [country, ...city] = parts;
    const user = await UserModel.findOne({ userId: ctx.chat.id });
    user.location = { country, city: city.join(' ') };
    await user.save();
    ctx.session.awaitingLocationInput = false;
    await ctx.reply(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${country}, ${city.join(' ')}`);
    return ctx.reply('üéâ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', mainKeyboard());
  }
  return next();
});

bot.hears('–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', ctx => ctx.scene.enter('adSubmission'));
bot.hears('–ö–∞–Ω–∞–ª —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏', ctx => ctx.reply('–°—é–¥–∞ üëá', Markup.inlineKeyboard([Markup.button.url('–ö–∞–Ω–∞–ª', process.env.CHANNEL_URL)])));
bot.hears('–ü–æ–º–æ—â—å', ctx => ctx.reply('–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @admin'));
bot.hears('–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', async ctx => {
  const ads = await AdModel.find({ userId: ctx.chat.id }).sort({ createdAt: -1 });
  if (!ads.length) return ctx.reply('–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.');
  for (const ad of ads) {
    const cap = `üìÇ <b>${categoryMap[ad.category]}</b>\nüìù ${ad.description}`;
    if (ad.mediaType === 'photo') await ctx.telegram.sendPhoto(ctx.chat.id, ad.mediaFileId, { caption: cap, parse_mode: 'HTML' });
    else if (ad.mediaType === 'video') await ctx.telegram.sendVideo(ctx.chat.id, ad.mediaFileId, { caption: cap, parse_mode: 'HTML' });
    else if (ad.mediaType === 'document') await ctx.telegram.sendDocument(ctx.chat.id, ad.mediaFileId, { caption: cap, parse_mode: 'HTML' });
    else await ctx.replyWithHTML(cap);
  }
});

bot.catch(err => console.error(err));

const app = express();
app.use(bot.webhookCallback('/'));
app.listen(PORT, async () => {
  console.log(`Listening on ${PORT}`);
  await bot.telegram.setWebhook(WEBHOOK_URL);
});