require('dotenv').config();
const express = require('express');
const { Telegraf, Markup, Scenes, session } = require('telegraf');
const mongoose = require('mongoose');
const { adSubmissionScene } = require('./adSubmissionScene');
const { UserModel, AdModel } = require('./models');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const MONGO_URI = process.env.MONGO_URI;
const PORT = process.env.PORT || 10000;
const WEBHOOK_URL = process.env.WEBHOOK_URL; // –£–∫–∞–∂–∏—Ç–µ –≤ .env

if (!BOT_TOKEN || !MONGO_URI || !WEBHOOK_URL) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç BOT_TOKEN, MONGO_URI –∏–ª–∏ WEBHOOK_URL –≤ .env');
  process.exit(1);
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'))
  .catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err.message);
    process.exit(1);
  });

const bot = new Telegraf(BOT_TOKEN);
bot.use(session());

// ========== Middleware –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ ==========
// –ë–ª–æ–∫–∏—Ä—É–µ–º _—Ç–æ–ª—å–∫–æ_ –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ –∫–æ–º–∞–Ω–¥—ã), –ø–æ–∫–∞ –∂–¥—ë–º –ª–æ–∫–∞—Ü–∏—é
bot.use((ctx, next) => {
  if (
    ctx.updateType === 'message' &&
    typeof ctx.message.text === 'string' &&
    !ctx.message.text.startsWith('/') && // –Ω–µ –∫–æ–º–∞–Ω–¥–∞
    ctx.session.awaitingLocation         // –∂–¥—ë–º –ª–æ–∫–∞—Ü–∏—é
  ) {
    return ctx.reply('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é (—Å—Ç—Ä–∞–Ω–∞ –∏/–∏–ª–∏ –≥–æ—Ä–æ–¥)');
  }
  return next();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω
const stage = new Scenes.Stage([adSubmissionScene]);
bot.use(stage.middleware());

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function mainMenu() {
  return Markup.keyboard([
    ['–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'],
    ['–û–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –º–æ—ë–º –≥–æ—Ä–æ–¥–µ', '–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'],
    ['–ö–∞–Ω–∞–ª —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏', '–ü–æ–º–æ—â—å'],
    ['–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è']
  ]).resize();
}

// === /start ===
bot.command('start', async ctx => {
  const userId = ctx.chat.id;
  let user = await UserModel.findOne({ userId });
  if (!user) {
    user = new UserModel({
      userId,
      adCount: 0,
      hasSubscription: false,
      location: { country: '–Ω–µ —É–∫–∞–∑–∞–Ω–æ', city: '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' }
    });
    await user.save();
  }

  // –ï—Å–ª–∏ –ª–æ–∫–∞—Ü–∏—è –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤ –±–∞–∑–µ ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º
  if (!user.location.city || user.location.city === '–Ω–µ —É–∫–∞–∑–∞–Ω–æ') {
    ctx.session.awaitingLocation = true;
    return ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é (—Å—Ç—Ä–∞–Ω–∞ –∏/–∏–ª–∏ –≥–æ—Ä–æ–¥):', Markup.removeKeyboard());
  }

  // –õ–æ–∫–∞—Ü–∏—è —É–∂–µ –µ—Å—Ç—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
  ctx.session.awaitingLocation = false;
  return ctx.reply('üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é:', mainMenu());
});

// === /setlocation ===
bot.command('setlocation', ctx => {
  ctx.session.awaitingLocation = true;
  return ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é (—Å—Ç—Ä–∞–Ω–∞ –∏/–∏–ª–∏ –≥–æ—Ä–æ–¥):', Markup.removeKeyboard());
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∏–º–æ–π –ª–æ–∫–∞—Ü–∏–∏ (plain text)
bot.on('text', async (ctx, next) => {
  if (ctx.session.awaitingLocation) {
    const txt = ctx.message.text.trim();
    if (txt.startsWith('/')) return; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã

    const parts = txt.split(/[.,\s]+/).filter(Boolean);
    const country = parts.length > 1 ? parts[0] : '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    const city    = parts.length > 1 ? parts.slice(1).join(' ') : parts[0];

    const user = await UserModel.findOne({ userId: ctx.chat.id });
    if (user) {
      user.location = { country, city };
      await user.save();
      ctx.session.awaitingLocation = false;
      await ctx.reply(`‚úÖ –õ–æ–∫–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${country}, ${city}`);
      return ctx.reply('üéâ –ú–µ–Ω—é:', mainMenu());
    }
    return ctx.reply('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ /start');
  }
  return next();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é
bot.hears('–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', ctx => ctx.scene.enter('adSubmission'));
bot.hears('–ö–∞–Ω–∞–ª —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏', ctx => ctx.reply('–°—é–¥–∞ üëá', Markup.inlineKeyboard([
  Markup.button.url('–ü–µ—Ä–µ–π—Ç–∏', 'https://t.me/+SpQdiZHBoypiNDky')
])));
bot.hears('–ü–æ–º–æ—â—å', ctx => ctx.reply('–ê–¥–º–∏–Ω: @max12kolt'));
bot.hears('–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', async ctx => {
  const ads = await AdModel.find({ userId: ctx.chat.id }).sort({ createdAt: -1 });
  if (!ads.length) return ctx.reply('–ù–µ—Ç –≤–∞—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π');
  for (let ad of ads) {
    const cap = `üìÇ <b>${categoryMap[ad.category]}</b>\nüìù ${ad.description}`;
    switch(ad.mediaType) {
      case 'photo': await ctx.telegram.sendPhoto(ctx.chat.id, ad.mediaFileId, { caption: cap, parse_mode: 'HTML' }); break;
      case 'video': await ctx.telegram.sendVideo(ctx.chat.id, ad.mediaFileId, { caption: cap, parse_mode: 'HTML' }); break;
      case 'document': await ctx.telegram.sendDocument(ctx.chat.id, ad.mediaFileId, { caption: cap, parse_mode: 'HTML' }); break;
      default: await ctx.replyWithHTML(cap);
    }
  }
});

bot.hears('–û–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –º–æ—ë–º –≥–æ—Ä–æ–¥–µ', async ctx => { ctx.session.offset = 0; await sendCity(ctx); });
bot.hears('–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', ctx => {
  ctx.session.offset = 0;
  return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ:', Markup.inlineKeyboard([
    [Markup.button.callback('üöó –ê–≤—Ç–æ','filter_auto')],
    [Markup.button.callback('üì± –¢–µ—Ö–Ω–∏–∫–∞','filter_tech')],
    [Markup.button.callback('üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å','filter_real_estate')],
    [Markup.button.callback('üëó –û–¥–µ–∂–¥–∞/–û–±—É–≤—å','filter_clothing')],
    [Markup.button.callback('üì¶ –ü—Ä–æ—á–µ–µ','filter_other')],
    [Markup.button.callback('üêæ –ñ–∏–≤–æ—Ç–Ω—ã–µ','filter_pets')]
  ]));
});

bot.action(/filter_(.+)/, async ctx => { ctx.session.category = ctx.match[1]; ctx.session.offset = 0; await ctx.answerCbQuery(); await sendCity(ctx, ctx.session.category); });
bot.action('more', async ctx => { ctx.session.offset +=5; await ctx.answerCbQuery(); await sendCity(ctx, ctx.session.category); });

async function sendCity(ctx, cat=null) {
  const user = await UserModel.findOne({ userId: ctx.chat.id });
  const { country, city } = user.location;
  const qCity = city.toLowerCase(), qCountry = country.toLowerCase();
  const ads = await AdModel.find({}).sort({createdAt:-1});
  let res=[];
  for (let ad of ads) {
    const u=await UserModel.findOne({userId:ad.userId}); if(!u) continue;
    const c=u.location.city.toLowerCase(), C=u.location.country.toLowerCase();
    let ok=false;
    if (qCity!=='–Ω–µ —É–∫–∞–∑–∞–Ω–æ' && c.includes(qCity)) ok=true;
    else if (qCountry!=='–Ω–µ —É–∫–∞–∑–∞–Ω–æ' && C.includes(qCountry)) ok=true;
    else if (!qCity && !qCountry) ok=true;
    if (ok && (!cat||ad.category===cat)) res.push(ad);
    if (res.length>=ctx.session.offset+5) break;
  }
  if (!res.length) return ctx.reply(`üîç –ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ "${city||country}"`);
  const page=res.slice(ctx.session.offset, ctx.session.offset+5);
  for (let ad of page) {
    const u=await UserModel.findOne({userId:ad.userId}); const loc=`${u.location.country}, ${u.location.city}`;
    const cap=`üìÇ <b>${categoryMap[ad.category]}</b>\nüìù ${ad.description}\nüìç ${loc}`;
    switch(ad.mediaType){
      case 'photo': await ctx.telegram.sendPhoto(ctx.chat.id,ad.mediaFileId,{caption:cap,parse_mode:'HTML'}); break;
      case 'video': await ctx.telegram.sendVideo(ctx.chat.id,ad.mediaFileId,{caption:cap,parse_mode:'HTML'}); break;
      case 'document': await ctx.telegram.sendDocument(ctx.chat.id,ad.mediaFileId,{caption:cap,parse_mode:'HTML'}); break;
      default: await ctx.replyWithHTML(cap);
    }
  }
  if (res.length>ctx.session.offset+5) await ctx.reply('‚¨áÔ∏è –ï—â—ë?', Markup.inlineKeyboard([Markup.button.callback('–ï—â—ë','more')]));
}

bot.catch(err=>console.error(err));

const app = express();
app.use(bot.webhookCallback('/'));
app.listen(PORT, async () => {
  console.log('–ó–∞–ø—É—â–µ–Ω–æ');
  await bot.telegram.setWebhook(WEBHOOK_URL);
});
