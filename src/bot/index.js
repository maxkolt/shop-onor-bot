require('dotenv').config();
const express = require('express');
const { Telegraf, Markup, Scenes, session } = require('telegraf');
const mongoose = require('mongoose');
const { adSubmissionScene } = require('./adSubmissionScene');
const { UserModel, AdModel } = require('./models');

const categoryMap = {
  auto: 'üöó –ê–≤—Ç–æ',
  tech: 'üì± –¢–µ—Ö–Ω–∏–∫–∞',
  real_estate: 'üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
  clothing: 'üëó –û–¥–µ–∂–¥–∞/–û–±—É–≤—å',
  other: 'üì¶ –ü—Ä–æ—á–µ–µ',
  pets: 'üêæ –¢–æ–≤–∞—Ä—ã –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö'
};

const BOT_TOKEN = process.env.BOT_TOKEN;
const MONGO_URI = process.env.MONGO_URI;
const PORT = process.env.PORT || 10000;
const WEBHOOK_URL = process.env.WEBHOOK_URL;

if (!BOT_TOKEN || !MONGO_URI || !WEBHOOK_URL) {
  console.error('‚ùå BOT_TOKEN, MONGO_URI –∏–ª–∏ WEBHOOK_URL –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ .env');
  process.exit(1);
}

mongoose.connect(MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'))
  .catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err.message);
    process.exit(1);
  });

const bot = new Telegraf(BOT_TOKEN);
bot.use(session());

// Middleware –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
bot.use((ctx, next) => {
  if (ctx.session?.awaitingLocationInput) {
    const messageText = ctx.message?.text;
    const allowed = ['/cancel', '/start', '/setlocation'];

    if (allowed.includes(messageText)) return next();

    if (messageText?.startsWith('/')) {
      return ctx.reply('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é (—Å—Ç—Ä–∞–Ω–∞ –∏ –≥–æ—Ä–æ–¥), –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.');
    }
    if (ctx.callbackQuery) {
      return ctx.reply('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é (—Å—Ç—Ä–∞–Ω–∞ –∏ –≥–æ—Ä–æ–¥), –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.');
    }
  }
  return next();
});

const stage = new Scenes.Stage([adSubmissionScene]);
bot.use(stage.middleware());

function mainMenu() {
  return Markup.keyboard([
    ['–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'],
    ['–û–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –º–æ—ë–º –≥–æ—Ä–æ–¥–µ', '–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'],
    ['–ö–∞–Ω–∞–ª —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏', '–ü–æ–º–æ—â—å'],
    ['–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è']
  ]).resize();
}

bot.command('start', async ctx => {
  const userId = ctx.chat.id;
  let user = await UserModel.findOne({ userId });
  if (!user) {
    user = new UserModel({
      userId,
      adCount: 0,
      hasSubscription: false,
      location: { country: '–Ω–µ —É–∫–∞–∑–∞–Ω–æ', city: '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' }
    });
    await user.save();
  }
  if (!user.location || !user.location.city || user.location.city.trim().toLowerCase() === '–Ω–µ —É–∫–∞–∑–∞–Ω–æ') {
    ctx.session.awaitingLocationInput = true;
    return ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é (—Å—Ç—Ä–∞–Ω–∞ –∏ –≥–æ—Ä–æ–¥):', Markup.removeKeyboard());
  }
  ctx.session.awaitingLocationInput = false;
  return ctx.reply('üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é:', mainMenu());
});

bot.command('setlocation', ctx => {
  ctx.session.awaitingLocationInput = true;
  return ctx.reply('üìç –í–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é (—Å—Ç—Ä–∞–Ω–∞ –∏ –≥–æ—Ä–æ–¥):', Markup.removeKeyboard());
});

bot.command('cancel', async ctx => {
  if (ctx.session.awaitingLocationInput) {
    ctx.session.awaitingLocationInput = false;
    await ctx.reply('‚ùå –û–∂–∏–¥–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...');
    return bot.handleUpdate({
      ...ctx.update,
      message: { ...ctx.message, text: '/start' }
    }, ctx.telegram);
  }
});

bot.on('text', async (ctx, next) => {
  if (ctx.session.awaitingLocationInput) {
    const parts = ctx.message.text.trim().split(/\s+/);
    if (parts.length < 2) return ctx.reply('‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∏ —Å—Ç—Ä–∞–Ω—É, –∏ –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è –ú–æ—Å–∫–≤–∞');
    const [country, ...rest] = parts;
    const city = rest.join(' ');

    let user = await UserModel.findOne({ userId: ctx.chat.id });
    if (!user) {
      user = new UserModel({ userId: ctx.chat.id, location: { country, city }, adCount: 0, hasSubscription: false });
    } else {
      user.location = { country, city };
    }
    await user.save();
    ctx.session.awaitingLocationInput = false;

    return ctx.reply(`‚úÖ –õ–æ–∫–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${country}, ${city}`, mainMenu());
  }
  return next();
});

bot.hears('–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', async (ctx) => {
  return ctx.scene.enter('adSubmission');
});

bot.hears('–ö–∞–Ω–∞–ª —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏', async (ctx) => {
  await ctx.reply('–°—é–¥–∞ üëá', Markup.inlineKeyboard([
    Markup.button.url('–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', 'https://t.me/+SpQdiZHBoypiNDky')
  ]));
});

bot.hears('–ü–æ–º–æ—â—å', async (ctx) => {
  await ctx.reply('–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @max12kolt](https://t.me/max12kolt)', { parse_mode: 'MarkdownV2' });
});

bot.hears('–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', async (ctx) => {
  const userId = ctx.chat.id;
  const ads = await AdModel.find({ userId }).sort({ createdAt: -1 }).limit(5);
  if (!ads.length) return ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.');
  for (const ad of ads) {
    const caption = `üìÇ <b>${categoryMap[ad.category] || ad.category}</b>\nüìù ${ad.description}`;
    if (ad.mediaType === 'photo') {
      await ctx.telegram.sendPhoto(ctx.chat.id, ad.mediaFileId, { caption, parse_mode: 'HTML' });
    } else if (ad.mediaType === 'video') {
      await ctx.telegram.sendVideo(ctx.chat.id, ad.mediaFileId, { caption, parse_mode: 'HTML' });
    } else if (ad.mediaType === 'document') {
      await ctx.telegram.sendDocument(ctx.chat.id, ad.mediaFileId, { caption, parse_mode: 'HTML' });
    } else {
      await ctx.replyWithHTML(caption);
    }
  }
});

bot.catch(err => console.error('‚ùå –û—à–∏–±–∫–∞:', err));

const app = express();
app.use(bot.webhookCallback('/'));
app.listen(PORT, async () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  try {
    await bot.telegram.setWebhook(WEBHOOK_URL);
    console.log('üì° Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', e.message);
  }
});
