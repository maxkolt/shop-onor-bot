const { Telegraf, Markup, Scenes, session } = require('telegraf');
const mongoose = require('mongoose');
// const YookassaPaymentService = require('./paymentService'); // –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ
const { adSubmissionScene } = require('./adSubmissionScene');
const { UserModel } = require('./models');

// === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
const BOT_TOKEN = '7785639584:AAGWHt_VWdfFXS-tYfsDw0gOHmcyu2lolks';
const MONGO_URI = 'mongodb+srv://12345kolt:kolosok12M@cluster0.bxxiz.mongodb.net/mydatabase?retryWrites=true&w=majority&appName=Cluster0';

// === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB ===
mongoose.connect(MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!'))
  .catch((err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message);
    process.exit(1);
  });

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
const bot = new Telegraf(BOT_TOKEN);

bot.telegram.getMe()
  .then((botInfo) => console.log(`ü§ñ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω`))
  .catch((err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API:', err.message);
    process.exit(1);
  });

// === –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ü–µ–Ω—ã ===
const stage = new Scenes.Stage([adSubmissionScene]);
bot.use(session());
bot.use(stage.middleware());

// === –ö–æ–º–∞–Ω–¥—ã ===
bot.command('start', async (ctx) => {
  await ctx.reply(
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:',
    Markup.keyboard([
      ['–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'],
      ['–ö–∞–Ω–∞–ª —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏', '–ü–æ–º–æ—â—å'],
    ]).resize()
  );

  // –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª
  await ctx.reply(
    'üì¢',
    Markup.inlineKeyboard([
      Markup.button.url('–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', 'https://t.me/+SpQdiZHBoypiNDky')
    ])
  );
});

bot.hears('–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', async (ctx) => {
  const userId = ctx.chat.id;

  let user = await UserModel.findOne({ userId });
  if (!user) {
    user = new UserModel({ userId, adCount: 0, hasSubscription: false });
    await user.save();
  }

  // –û—Ç–∫–ª—é—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ ‚Äî –ª–æ–≥–∏–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  /*
  if (!user.hasSubscription && user.adCount >= 3) {
    return ctx.reply(
      '–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.',
      Markup.inlineKeyboard([[Markup.button.callback('–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'subscribe')]])
    );
  }
  */

  return ctx.scene.enter('adSubmission');
});

/*
// === –ü–æ–¥–ø–∏—Å–∫–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ) ===
bot.hears('–ü–æ–¥–ø–∏—Å–∫–∞', async (ctx) => {
  const userId = ctx.chat.id;

  const invoice = await paymentService.createInvoice(139, 'RUB', '–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏', userId);

  if (invoice) {
    await ctx.reply(
      '–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ —Å—Å—ã–ª–∫–µ:',
      Markup.inlineKeyboard([
        [Markup.button.url('–û–ø–ª–∞—Ç–∏—Ç—å', invoice.url)],
        [Markup.button.callback('–Ø –æ–ø–ª–∞—Ç–∏–ª', 'check_payment')],
      ])
    );
  } else {
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

bot.action('check_payment', async (ctx) => {
  const userId = ctx.chat.id;
  const user = await UserModel.findOne({ userId });

  if (!user) {
    return ctx.reply('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.');
  }

  const paymentStatus = await paymentService.checkPaymentStatus();

  if (paymentStatus.isPaid) {
    user.hasSubscription = true;
    await user.save();
    return ctx.reply('–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞.');
  }

  return ctx.reply('–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.');
});
*/

bot.hears('–ü–æ–º–æ—â—å', async (ctx) => {
  await ctx.reply(
    '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @max12kolt](https://t.me/max12kolt)',
    { parse_mode: 'MarkdownV2' }
  );
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ===
bot.catch((err) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞:', err.message);
});

// === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
bot.launch()
  .then(() => console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!'))
  .catch((err) => console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', err.message));
