require('dotenv').config();

const express = require('express');
const { Telegraf, Markup, Scenes, session } = require('telegraf');
const mongoose = require('mongoose');
const { categoryMap } = require('./utils');
const adSubmissionScene = require('./adSubmissionScene');
const { UserModel, AdModel } = require('./models');

// === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
const BOT_TOKEN = process.env.BOT_TOKEN;
const MONGO_URI = process.env.MONGO_URI;
const WEBHOOK_URL = process.env.WEBHOOK_URL;
const PORT = process.env.PORT || 10000;

if (!BOT_TOKEN || !MONGO_URI || !WEBHOOK_URL) {
  console.error('‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã BOT_TOKEN, MONGO_URI –∏–ª–∏ WEBHOOK_URL');
  process.exit(1);
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose
  .connect(MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!'))
  .catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', err.message);
    process.exit(1);
  });

const bot = new Telegraf(BOT_TOKEN);
bot.use(session());

// Stage –∏ —Å—Ü–µ–Ω–∞ –ø–æ–¥–∞—á–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
const stage = new Scenes.Stage([adSubmissionScene]);
bot.use(stage.middleware());

// === Middleware: –±–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ /setlocation –≤–Ω—É—Ç—Ä–∏ —Å—Ü–µ–Ω—ã ===
bot.use((ctx, next) => {
  if (
    ctx.scene.current?.id === 'adSubmission' &&
    ctx.updateType === 'message' &&
    ctx.message.text === '/setlocation'
  ) {
    return ctx.reply('‚ùó –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø–æ–¥–∞—á—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è /cancel.');
  }
  return next();
});

// === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
function mainKeyboard() {
  return Markup.keyboard([
    ['–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'],
    ['–û–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –º–æ—ë–º –≥–æ—Ä–æ–¥–µ', '–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'],
    ['–ö–∞–Ω–∞–ª —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏', '–ü–æ–º–æ—â—å'],
    ['–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è']
  ]).resize();
}

// === –ö–æ–º–∞–Ω–¥–∞ /start ===
bot.command('start', async ctx => {
  // –≤—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã, –µ—Å–ª–∏ –≤ –Ω–µ–π
  if (ctx.scene.current) {
    await ctx.scene.leave();
  }

  const userId = ctx.chat.id;
  let user = await UserModel.findOne({ userId });
  if (!user) {
    user = new UserModel({
      userId,
      adCount: 0,
      hasSubscription: false,
      location: { country: '–Ω–µ —É–∫–∞–∑–∞–Ω–æ', city: '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' }
    });
    await user.save();
  }

  // –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞—Ü–∏–∏
  if (!user.location.city || user.location.city === '–Ω–µ —É–∫–∞–∑–∞–Ω–æ') {
    ctx.session.awaitingLocationInput = true;
    return ctx.reply(
      'üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–°—Ç—Ä–∞–Ω–∞ –ì–æ—Ä–æ–¥):',
      Markup.removeKeyboard()
    );
  }

  // –µ—Å–ª–∏ –ª–æ–∫–∞—Ü–∏—è –µ—Å—Ç—å
  ctx.session.awaitingLocationInput = false;
  return ctx.reply(
    'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:',
    mainKeyboard()
  );
});

// === –ö–æ–º–∞–Ω–¥–∞ /setlocation ===
bot.command('setlocation', ctx => {
  ctx.session.awaitingLocationInput = true;
  return ctx.reply(
    'üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–°—Ç—Ä–∞–Ω–∞ –ì–æ—Ä–æ–¥):',
    Markup.removeKeyboard()
  );
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–∫–∞—Ü–∏–∏ ===
bot.on('text', async (ctx, next) => {
  if (ctx.session.awaitingLocationInput) {
    const text = ctx.message.text.trim();
    if (text.startsWith('/')) return;

    const parts = text.split(/[\s,\.]+/).filter(Boolean);
    let country = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    let city = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    if (parts.length === 1) city = parts[0];
    else { country = parts[0]; city = parts.slice(1).join(' '); }

    const user = await UserModel.findOne({ userId: ctx.chat.id });
    user.location = { country, city };
    await user.save();

    ctx.session.awaitingLocationInput = false;
    await ctx.reply(`‚úÖ –õ–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${country}, ${city}`);
    return ctx.reply(
      'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:',
      mainKeyboard()
    );
  }
  return next();
});

// === –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–∏ ===
bot.use((ctx, next) => {
  if (ctx.session.awaitingLocationInput && ctx.updateType === 'message') {
    return ctx.reply('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏ –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è –ú–æ—Å–∫–≤–∞');
  }
  return next();
});

// === –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ===
bot.hears('–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', ctx => ctx.scene.enter('adSubmission'));
bot.hears('–ö–∞–Ω–∞–ª —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏', ctx =>
  ctx.reply(
    '–°—é–¥–∞ üëá',
    Markup.inlineKeyboard([
      Markup.button.url('–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', process.env.CHANNEL_URL)
    ])
  )
);
bot.hears('–ü–æ–º–æ—â—å', ctx => ctx.reply('–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @max12kolt'));

bot.hears('–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', async ctx => {
  const ads = await AdModel.find({ userId: ctx.chat.id }).sort({ createdAt: -1 });
  if (!ads.length) return ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.');

  for (const ad of ads) {
    const cap = `üìÇ <b>${categoryMap[ad.category]}</b>\nüìù ${ad.description}`;
    if (ad.mediaType === 'photo')
      await ctx.telegram.sendPhoto(ctx.chat.id, ad.mediaFileId, { caption: cap, parse_mode: 'HTML' });
    else if (ad.mediaType === 'video')
      await ctx.telegram.sendVideo(ctx.chat.id, ad.mediaFileId, { caption: cap, parse_mode: 'HTML' });
    else if (ad.mediaType === 'document')
      await ctx.telegram.sendDocument(ctx.chat.id, ad.mediaFileId, { caption: cap, parse_mode: 'HTML' });
    else
      await ctx.replyWithHTML(cap);
  }
});

bot.catch(err => console.error('‚ùå –û—à–∏–±–∫–∞:', err));

const app = express();
app.use(bot.webhookCallback('/'));
app.listen(PORT, async () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  try {
    await bot.telegram.setWebhook(WEBHOOK_URL);
    console.log('Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ webhook:', e.message);
  }
});
