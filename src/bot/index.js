require('dotenv').config();

const express = require('express');
const { Telegraf, Markup, Scenes, session } = require('telegraf');
const mongoose = require('mongoose');
const adSubmissionScene = require('./adSubmissionScene');
const { UserModel, AdModel } = require('./models');

const categoryMap = {
  auto: 'üöó –ê–≤—Ç–æ',
  tech: 'üì± –¢–µ—Ö–Ω–∏–∫–∞',
  real_estate: 'üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
  clothing: 'üëó –û–¥–µ–∂–¥–∞/–û–±—É–≤—å',
  other: 'üì¶ –ü—Ä–æ—á–µ–µ',
  pets: 'üêæ –¢–æ–≤–∞—Ä—ã –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö',
};

// === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
const BOT_TOKEN = process.env.BOT_TOKEN;
const MONGO_URI = process.env.MONGO_URI;
const PORT = process.env.PORT || 10000;
const WEBHOOK_URL = 'https://boroxlo-bot-tg.onrender.com';

if (!BOT_TOKEN || !MONGO_URI) {
  console.error('‚ùå BOT_TOKEN –∏–ª–∏ MONGO_URI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env');
  process.exit(1);
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!'))
  .catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message);
    process.exit(1);
  });

const bot = new Telegraf(BOT_TOKEN);
bot.use(session());

const stage = new Scenes.Stage([adSubmissionScene]);
bot.use(stage.middleware());

// === Middleware: –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ /setlocation –≤–Ω—É—Ç—Ä–∏ —Å—Ü–µ–Ω—ã –ø–æ–¥–∞—á–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ===
bot.use((ctx, next) => {
  if (ctx.scene.current && ctx.scene.current.id === 'adSubmission') {
    return ctx.reply(
      '‚ùó –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –≤–≤–æ–¥ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /cancel.'
    );
  }
  return next();
});

// === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
function mainKeyboard() {
  return Markup.keyboard([
    ['–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'],
    ['–û–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –º–æ—ë–º –≥–æ—Ä–æ–¥–µ', '–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'],
    ['–ö–∞–Ω–∞–ª —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏', '–ü–æ–º–æ—â—å'],
    ['–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è']
  ]).resize();
}

// === –ö–æ–º–∞–Ω–¥–∞ /start ===
bot.command('start', async ctx => {
  const userId = ctx.chat.id;
  let user = await UserModel.findOne({ userId });
  if (!user) {
    user = new UserModel({
      userId,
      adCount: 0,
      hasSubscription: false,
      location: { country: '–Ω–µ —É–∫–∞–∑–∞–Ω–æ', city: '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' }
    });
    await user.save();
  }

  if (!user.location.city || user.location.city === '–Ω–µ —É–∫–∞–∑–∞–Ω–æ') {
    ctx.session.awaitingLocationInput = true;
    return ctx.reply(
      'üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–°—Ç—Ä–∞–Ω–∞ –ì–æ—Ä–æ–¥):',
      Markup.removeKeyboard()
    );
  }

  ctx.session.awaitingLocationInput = false;
  return ctx.reply('üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', mainKeyboard());
});

// === –ö–æ–º–∞–Ω–¥–∞ /setlocation ===
bot.command('setlocation', async ctx => {
  ctx.session.awaitingLocationInput = true;
  return ctx.reply(
    'üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–°—Ç—Ä–∞–Ω–∞ –ì–æ—Ä–æ–¥):',
    Markup.removeKeyboard()
  );
});

// === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
bot.on('text', async (ctx, next) => {
  if (ctx.session.awaitingLocationInput) {
    const text = ctx.message.text.trim();
    if (text.startsWith('/')) return; // –ø—Ä–æ—á–∏–µ –∫–æ–º–∞–Ω–¥—ã

    const parts = text.split(/[\s,\.]+/).filter(Boolean);
    let country = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    let city = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';

    if (parts.length === 1) {
      city = parts[0];
    } else {
      country = parts[0];
      city = parts.slice(1).join(' ');
    }

    const user = await UserModel.findOne({ userId: ctx.chat.id });
    user.location = { country, city };
    await user.save();

    ctx.session.awaitingLocationInput = false;
    await ctx.reply(`‚úÖ –õ–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${country}, ${city}`);
    return ctx.reply('üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', mainKeyboard());
  }
  return next();
});

// === Middleware: –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –º–µ–Ω—é –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–∏ ===
bot.use((ctx, next) => {
  if (ctx.session.awaitingLocationInput && ctx.updateType === 'message') {
    return ctx.reply(
      '‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏ –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è –ú–æ—Å–∫–≤–∞'
    );
  }
  return next();
});

// === –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ===
bot.hears('–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', ctx => ctx.scene.enter('adSubmission'));
bot.hears('–ö–∞–Ω–∞–ª —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏', ctx =>
  ctx.reply(
    '–°—é–¥–∞ üëá',
    Markup.inlineKeyboard([
      Markup.button.url('–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', 'https://t.me/+SpQdiZHBoypiNDky')
    ])
  )
);
bot.hears('–ü–æ–º–æ—â—å', ctx =>
  ctx.reply('–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @max12kolt')
);

bot.hears('–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', async ctx => {
  const ads = await AdModel.find({ userId: ctx.chat.id }).sort({ createdAt: -1 });
  if (!ads.length) return ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.');

  for (const ad of ads) {
    const cap = `üìÇ <b>${categoryMap[ad.category]}</b>\nüìù ${ad.description}`;
    if (ad.mediaType === 'photo') {
      await ctx.telegram.sendPhoto(ctx.chat.id, ad.mediaFileId, {
        caption: cap,
        parse_mode: 'HTML'
      });
    } else if (ad.mediaType === 'video') {
      await ctx.telegram.sendVideo(ctx.chat.id, ad.mediaFileId, {
        caption: cap,
        parse_mode: 'HTML'
      });
    } else if (ad.mediaType === 'document') {
      await ctx.telegram.sendDocument(ctx.chat.id, ad.mediaFileId, {
        caption: cap,
        parse_mode: 'HTML'
      });
    } else {
      await ctx.replyWithHTML(cap);
    }
  }
});

// –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∏ –ø–æ–∫–∞–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –≥–æ—Ä–æ–¥—É
async function sendCityAds(ctx, categoryFilter = null) {
  const user = await UserModel.findOne({ userId: ctx.chat.id });
  if (!user || !user.location || !user.location.city || user.location.city === '–Ω–µ —É–∫–∞–∑–∞–Ω–æ') {
    ctx.session.cityAdOffset = 0;
    ctx.session.awaitingLocationInput = true;
    return ctx.reply(
      '‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ /setlocation, –Ω–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è –ú–æ—Å–∫–≤–∞'
    );
  }

  const cityQuery = user.location.city.toLowerCase();
  const countryQuery = user.location.country.toLowerCase();
  const offset = ctx.session.cityAdOffset || 0;
  const allAds = await AdModel.find({}).sort({ createdAt: -1 });

  const filtered = allAds.filter(ad =>
    ad.location.country.toLowerCase() === countryQuery &&
    ad.location.city.toLowerCase() === cityQuery &&
    (!categoryFilter || ad.category === categoryFilter)
  );

  const pagedAds = filtered.slice(offset, offset + 5);

  if (!pagedAds.length) {
    return ctx.reply('üì≠ –ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.');
  }

  for (const ad of pagedAds) {
    const cap = `üìÇ <b>${categoryMap[ad.category]}</b>\nüìù ${ad.description}`;
    if (ad.mediaType === 'photo') {
      await ctx.telegram.sendPhoto(ctx.chat.id, ad.mediaFileId, {
        caption: cap,
        parse_mode: 'HTML'
      });
    } else if (ad.mediaType === 'video') {
      await ctx.telegram.sendVideo(ctx.chat.id, ad.mediaFileId, {
        caption: cap,
        parse_mode: 'HTML'
      });
    } else if (ad.mediaType === 'document') {
      await ctx.telegram.sendDocument(ctx.chat.id, ad.mediaFileId, {
        caption: cap,
        parse_mode: 'HTML'
      });
    } else {
      await ctx.replyWithHTML(cap);
    }
  }

  ctx.session.cityAdOffset = offset + pagedAds.length;
  if (offset + pagedAds.length < filtered.length) {
    await ctx.reply(
      '‚¨áÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë?',
      Markup.inlineKeyboard([Markup.button.callback('–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë', 'more_city_ads')])
    );
  } else {
    ctx.session.cityAdOffset = 0;
  }
}

bot.action('more_city_ads', ctx => sendCityAds(ctx));
bot.hears('–û–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –º–æ—ë–º –≥–æ—Ä–æ–¥–µ', ctx => sendCityAds(ctx));
bot.hears('–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', ctx =>
  ctx.reply(
    '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:',
    Markup.inlineKeyboard(Object.entries(categoryMap).map(
      ([key, label]) => Markup.button.callback(label, `filter_${key}`)
    ), { columns: 2 })
  )
);
bot.action(/filter_(.+)/, (ctx) => {
  const category = ctx.match[1];
  return sendCityAds(ctx, category);
});

bot.catch(err => console.error('‚ùå –û—à–∏–±–∫–∞:', err));

const app = express();
app.use(bot.webhookCallback('/'));
app.listen(PORT, async () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  try {
    await bot.telegram.setWebhook(WEBHOOK_URL);
    console.log('Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ webhook:', e.message);
  }
});
